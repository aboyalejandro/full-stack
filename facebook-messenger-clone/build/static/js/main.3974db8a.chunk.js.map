{"version":3,"sources":["Message.js","firebase.js","App.js","reportWebVitals.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","FormControl","InputLabel","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8UAwBeA,EApBCC,sBAAW,WAAsBC,GAAS,IAA7BC,EAA4B,EAA5BA,QACnBC,EAD+C,EAAnBC,WACNF,EAAQE,SAEpC,OACI,qBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,gBAA/C,SACI,cAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,mBAAqB,oBAA/C,SACI,cAACI,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,KACRC,UAAU,KAHd,WAKMR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MALL,IAK4DF,EAAQA,oB,QCJzEU,EAVKC,IAASC,cAAc,CACvCC,OAAQ,0CACRC,WAAY,iDACZC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,8CAGYC,Y,iCC+DRC,MAhEf,WACA,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAAgCJ,mBAAS,IAAzC,mBAAOnB,EAAP,KAAiBwB,EAAjB,KA8BE,OA1BFC,qBAAU,WACRjB,EAAGkB,WAAW,YACbC,QAAQ,YAAY,QACpBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAInC,QAASkC,EAAIE,iBAElE,IAEFT,qBAAU,WACRD,EAAYW,OAAO,6BAClB,IAiBC,sBAAKlC,UAAU,MAAf,UACE,0DACA,0CAAaD,EAAb,OACA,sBAAMC,UAAU,WAAhB,SACE,eAACmC,EAAA,EAAD,CAAanC,UAAU,kBAAvB,UACE,cAACoC,EAAA,EAAD,iCACA,cAACC,EAAA,EAAD,CAAOrC,UAAU,YAAYsC,YAAY,qBAAqBC,MAAOpB,EAAOqB,SAAU,SAAAC,GAAK,OAAIrB,EAASqB,EAAMC,OAAOH,UACrH,cAACI,EAAA,EAAD,CAAY3C,UAAU,iBAAiB4C,UAAWzB,EAAOd,QAAQ,YAAYD,MAAM,UAAUyC,KAAK,SAASC,QAtBjG,SAACL,GACnBA,EAAMM,iBAGNxC,EAAGkB,WAAW,YAAYuB,IAAI,CAC5BnD,QAASsB,EACTpB,SAAUA,EACVkD,UAAWzC,IAASQ,UAAUkC,WAAWC,oBAI3C/B,EAAS,KAWD,SACE,cAAC,IAAD,CAAUpB,UAAU,wBAM9B,cAAC,IAAD,UAEQqB,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAInC,EAAN,EAAMA,QAAN,OACX,cAAC,EAAD,CAEEE,SAAUA,EACVF,QAASA,GAFJmC,YClDJoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3974db8a.chunk.js","sourcesContent":["import React, {forwardRef} from 'react'\nimport \"./Message.css\"\nimport {Card, CardContent, Typography} from \"@material-ui/core\"\n\nconst Message = forwardRef(({message, username}, ref) => {\n    const isUser = username === message.username ;\n    \n    return (\n        <div ref={ref} className={`message ${isUser && 'message_user'}`}> \n            <Card className={isUser ? \"message_userCard\" : \"message_guestCard\"}>\n                <CardContent>\n                    <Typography\n                        color=\"white\"\n                        variant=\"h5\"\n                        component=\"h2\"\n                    >\n                        {!isUser && `${message.username || \"Unknown User\"}: `} {message.message}\n                    </Typography>\n                </CardContent>\n            </Card>       \n        </div>   \n    )\n})\n\nexport default Message\n","import firebase from \"firebase\"\n\nconst firebaseApp = firebase.initializeApp({\n    apiKey: \"AIzaSyCsWtrTP2Y3eh3pWQLYM75m7g3bvQBIh5M\",\n    authDomain: \"facebook-messenger-clone-a75e5.firebaseapp.com\",\n    projectId: \"facebook-messenger-clone-a75e5\",\n    storageBucket: \"facebook-messenger-clone-a75e5.appspot.com\",\n    messagingSenderId: \"597812824724\",\n    appId: \"1:597812824724:web:ebc114eeeb7f67c3584281\"\n  });\n\nconst db = firebaseApp.firestore();\nexport default db; ","import './App.css';\nimport React, {useState, useEffect} from 'react'\nimport {Button, FormControl, Input, InputLabel} from \"@material-ui/core\"\nimport Message from \"./Message\"\nimport db from \"./firebase\"\nimport firebase from \"firebase\"\nimport FlipMove from \"react-flip-move\"\nimport SendIcon from \"@material-ui/icons/Send\"\nimport {IconButton} from \"@material-ui/core\"\n\nfunction App() {\nconst [input, setInput] = useState(\"\");\nconst [messages, setMessages] = useState([]);\nconst [username, setUsername] = useState(\"\")\n//console.log(input)\n//console.log(messages)\n\nuseEffect(() => {\n  db.collection('messages')\n  .orderBy('timestamp','desc')\n  .onSnapshot(snapshot => {\n    setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n  })\n},[])\n\nuseEffect(() => {\n  setUsername(prompt('Please enter your name'))\n}, [])\n\nconst sendMessage = (event) => {\n  event.preventDefault();\n  // setMessages([...messages, input]) //Keep the current and append the ending one\n  \n  db.collection(\"messages\").add({\n    message: input, \n    username: username, \n    timestamp: firebase.firestore.FieldValue.serverTimestamp()\n  })\n  \n  // setMessages([...messages, {username: username, text: input}]) //Keep the current and append the ending one\n  setInput(\"\");\n}\n\n  return (\n    <div className=\"App\">\n      <h1>Facebook Messenger Clone</h1>\n      <h2>Welcome {username} </h2>\n      <form className=\"app_form\">\n        <FormControl className=\"app_formControl\">\n          <InputLabel>Enter a message...</InputLabel>\n          <Input className=\"app_input\" placeholder=\"Enter a message...\" value={input} onChange={event => setInput(event.target.value)}/> \n          <IconButton className=\"app_iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={sendMessage}>\n            <SendIcon className=\"app_sendIcon\"/> \n          </IconButton>\n        </FormControl>\n      </form>\n\n      {/*messages themselves */}\n  <FlipMove>\n        {\n          messages.map(({id, message}) => (\n            <Message \n              key={id}\n              username={username} \n              message={message}\n            />\n            //<p>{message}</p>\n          ))\n        }\n  </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}