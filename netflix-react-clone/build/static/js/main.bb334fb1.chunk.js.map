{"version":3,"sources":["logo.svg","axios.js","requests.js","Row.js","Navbar.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Row","title","fetchUrl","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","src","back_path","backdrop_path","alt","name","id","Navbar","show","handleShow","window","addEventListener","scrollY","removeEventListener","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","App","isLargeRow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb334fb1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n});\n\nexport default instance; ","const API_KEY = \"01b67ada7ce8169a11886d211a01ab55\"\n\nconst requests = {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_network=123`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\n        \n}\n\nexport default requests;","import React, { useState, useEffect} from 'react'\nimport axios from './axios';\nimport \"./Row.css\"\nimport requests from \"./requests\"\n\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({title, fetchUrl }) {\n\n    const [movies, setMovies] = useState([]);\n\n    useEffect(()=>{\n        async function fetchData() {\n            const request = await axios.get(fetchUrl);\n            //console.log(request.data.results);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [fetchUrl]); //variable outside of the useEffect, its a dependency on change\n\n    // console.table(movies)\n\n    return (\n        <div className=\"row\">\n            <h2>{title}</h2>\n            <div className=\"row_posters\">\n                {/* row_posters */}\n                {movies.map((movie) => (\n                    <img \n                        className = \"row_poster\"\n                        key={movie.id} \n                        src={`${base_url}${movie.back_path || movie.backdrop_path\n                        }`} \n                        alt={movie.name}\n                        />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default Row\n","import React, {useEffect, useState} from 'react'\nimport \"./Navbar.css\"\n\nfunction Navbar() {\n    const [show, handleShow] = useState(false)\n\n  useEffect(() => {\n    window.addEventListener(\"scroll\", () => {\n      if (window.scrollY > 100) {\n        handleShow(true)\n      } else handleShow(false);\n    });\n    return () => {\n      window.removeEventListener(\"scroll\",handleShow(false))\n    }\n  }, []);\n\n    return (\n        <div className={`nav ${show && \"nav_black\"}`}>\n            <img \n            className=\"nav_logo\"\n            src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/250px-Netflix_2015_logo.svg.png\"\n            alt=\"Netflix Logo\"\n            />\n            <img\n            className=\"nav_avatar\"\n            src=\"https://mir-s3-cdn-cf.behance.net/project_modules/disp/366be133850498.56ba69ac36858.png\"\n            alt=\"Netflix Logo\"\n            />\n        </div>\n    )\n}\n\nexport default Navbar\n","import React, {useState, useEffect} from 'react'\nimport axios from './axios';\nimport requests from \"./requests\"\nimport \"./Banner.css\"\n\nfunction Banner() {\n    const [movie, setMovie] = useState([]);\n\n    useEffect(() => {\n        async function fetchData() {\n            const request = await axios.get(requests.fetchNetflixOriginals);\n            //console.log(request.data.results)\n            setMovie(\n                request.data.results[\n                    Math.floor(Math.random()* request.data.results.length -1)\n                ]\n            );\n            // console.log(Math.floor(Math.random()* request.data.results.length -1))\n            return request;\n        }\n        fetchData();\n    }, []);\n\n    //console.log(movie)\n\n    function truncate(str, n) {\n        return str?.length > n ? str.substr(0, n-1) + \"...\" : str;\n    }\n\n    return (\n        <header className=\"banner\"\n            style={{\n                backgroundSize: \"cover\",\n                backgroundImage: `url(\n                    \"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\"\n                )`,\n                backgroundPosition: \"center center\",\n            }}\n        >\n            <div className=\"banner_contents\">\n                <h1 className=\"banner_title\">\n                    {movie?.title || movie?.name || movie?.original_name}\n                </h1>\n                <div className=\"banner_buttons\">\n                    <button className=\"banner_button\"> Play </button>\n                    <button className=\"banner_button\"> My List</button>\n                </div>\n\n                <h1 className=\"banner_description\">\n                    {truncate(movie?.overview, 150)}\n                </h1>\n\n            </div>\n            <div className=\"banner--fadeBottom\"/>\n            \n        </header>\n    )\n}\n\nexport default Banner\n","import logo from './logo.svg';\nimport './App.css';\nimport Row from \"./Row\"\nimport Navbar from \"./Navbar\"\nimport Banner from \"./Banner\"\nimport requests from \"./requests\"\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Navbar/>\n      <Banner/>\n      <Row \n        title=\"NETFLIX ORIGINALS\" \n        fetchUrl={requests.fetchNetflixOriginals} \n        isLargeRow={true}\n        />\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/> \n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/> \n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/> \n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/> \n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}